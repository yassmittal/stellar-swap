{"abi":[{"type":"error","name":"SafeCastOverflowedIntDowncast","inputs":[{"name":"bits","type":"uint8","internalType":"uint8"},{"name":"value","type":"int256","internalType":"int256"}]},{"type":"error","name":"SafeCastOverflowedIntToUint","inputs":[{"name":"value","type":"int256","internalType":"int256"}]},{"type":"error","name":"SafeCastOverflowedUintDowncast","inputs":[{"name":"bits","type":"uint8","internalType":"uint8"},{"name":"value","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"SafeCastOverflowedUintToInt","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122075790512a817094b62becdfdcd3ec43146cfe2cc087db331bba4df2959843cff64736f6c63430008170033","sourceMap":"769:34200:46:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x5f80fdfea264697066735822122075790512a817094b62becdfdcd3ec43146cfe2cc087db331bba4df2959843cff64736f6c63430008170033","sourceMap":"769:34200:46:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@1inch/limit-order-protocol-contract/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/\",\":@1inch/limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/\",\":@1inch/solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/\",\":@openzeppelin/contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/\",\":cross-chain-swap/=contracts/lib/cross-chain-swap/contracts/\",\":ds-test/=contracts/lib/cross-chain-swap/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=contracts/lib/forge-std/src/\",\":limit-order-protocol/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/\",\":limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/\",\":murky/=contracts/lib/cross-chain-swap/lib/murky/\",\":openzeppelin-contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/\",\":solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/\"],\"viaIR\":true},\"sources\":{\"contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"type":"error","name":"SafeCastOverflowedIntDowncast"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"type":"error","name":"SafeCastOverflowedIntToUint"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"SafeCastOverflowedUintDowncast"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"SafeCastOverflowedUintToInt"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@1inch/limit-order-protocol-contract/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/","@1inch/limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/","@1inch/solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/","@openzeppelin/contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/","cross-chain-swap/=contracts/lib/cross-chain-swap/contracts/","ds-test/=contracts/lib/cross-chain-swap/lib/forge-std/lib/ds-test/src/","erc4626-tests/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=contracts/lib/forge-std/src/","limit-order-protocol/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/","limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/","murky/=contracts/lib/cross-chain-swap/lib/murky/","openzeppelin-contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/","solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":"SafeCast"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e","urls":["bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047","dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":46}