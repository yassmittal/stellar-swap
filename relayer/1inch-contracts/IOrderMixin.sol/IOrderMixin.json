{"abi":[{"type":"function","name":"bitInvalidatorForOrder","inputs":[{"name":"maker","type":"address","internalType":"address"},{"name":"slot","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"result","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"bitsInvalidateForOrder","inputs":[{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"},{"name":"additionalMask","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cancelOrder","inputs":[{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cancelOrders","inputs":[{"name":"makerTraits","type":"uint256[]","internalType":"MakerTraits[]"},{"name":"orderHashes","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fillContractOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct IOrderMixin.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"maker","type":"uint256","internalType":"Address"},{"name":"receiver","type":"uint256","internalType":"Address"},{"name":"makerAsset","type":"uint256","internalType":"Address"},{"name":"takerAsset","type":"uint256","internalType":"Address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"}]},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"takerTraits","type":"uint256","internalType":"TakerTraits"}],"outputs":[{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"fillContractOrderArgs","inputs":[{"name":"order","type":"tuple","internalType":"struct IOrderMixin.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"maker","type":"uint256","internalType":"Address"},{"name":"receiver","type":"uint256","internalType":"Address"},{"name":"makerAsset","type":"uint256","internalType":"Address"},{"name":"takerAsset","type":"uint256","internalType":"Address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"}]},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"takerTraits","type":"uint256","internalType":"TakerTraits"},{"name":"args","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"fillOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct IOrderMixin.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"maker","type":"uint256","internalType":"Address"},{"name":"receiver","type":"uint256","internalType":"Address"},{"name":"makerAsset","type":"uint256","internalType":"Address"},{"name":"takerAsset","type":"uint256","internalType":"Address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"}]},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"vs","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"takerTraits","type":"uint256","internalType":"TakerTraits"}],"outputs":[{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"fillOrderArgs","inputs":[{"name":"order","type":"tuple","internalType":"struct IOrderMixin.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"maker","type":"uint256","internalType":"Address"},{"name":"receiver","type":"uint256","internalType":"Address"},{"name":"makerAsset","type":"uint256","internalType":"Address"},{"name":"takerAsset","type":"uint256","internalType":"Address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"}]},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"vs","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"takerTraits","type":"uint256","internalType":"TakerTraits"},{"name":"args","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"hashOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct IOrderMixin.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"maker","type":"uint256","internalType":"Address"},{"name":"receiver","type":"uint256","internalType":"Address"},{"name":"makerAsset","type":"uint256","internalType":"Address"},{"name":"takerAsset","type":"uint256","internalType":"Address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"makerTraits","type":"uint256","internalType":"MakerTraits"}]}],"outputs":[{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"rawRemainingInvalidatorForOrder","inputs":[{"name":"maker","type":"address","internalType":"address"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"remainingRaw","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"remainingInvalidatorForOrder","inputs":[{"name":"maker","type":"address","internalType":"address"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"remaining","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"simulate","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"BitInvalidatorUpdated","inputs":[{"name":"maker","type":"address","indexed":true,"internalType":"address"},{"name":"slotIndex","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"slotValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OrderCancelled","inputs":[{"name":"orderHash","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"OrderFilled","inputs":[{"name":"orderHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"remainingAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"BadSignature","inputs":[]},{"type":"error","name":"EpochManagerAndBitInvalidatorsAreIncompatible","inputs":[]},{"type":"error","name":"InvalidPermit2Transfer","inputs":[]},{"type":"error","name":"InvalidatedOrder","inputs":[]},{"type":"error","name":"MakingAmountTooLow","inputs":[]},{"type":"error","name":"MismatchArraysLengths","inputs":[]},{"type":"error","name":"OrderExpired","inputs":[]},{"type":"error","name":"OrderIsNotSuitableForMassInvalidation","inputs":[]},{"type":"error","name":"PartialFillNotAllowed","inputs":[]},{"type":"error","name":"PredicateIsNotTrue","inputs":[]},{"type":"error","name":"PrivateOrder","inputs":[]},{"type":"error","name":"ReentrancyDetected","inputs":[]},{"type":"error","name":"SimulationResults","inputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"res","type":"bytes","internalType":"bytes"}]},{"type":"error","name":"SwapWithZeroAmount","inputs":[]},{"type":"error","name":"TakingAmountExceeded","inputs":[]},{"type":"error","name":"TakingAmountTooHigh","inputs":[]},{"type":"error","name":"TransferFromMakerToTakerFailed","inputs":[]},{"type":"error","name":"TransferFromTakerToMakerFailed","inputs":[]},{"type":"error","name":"WrongSeriesNonce","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"bitInvalidatorForOrder(address,uint256)":"143e86a7","bitsInvalidateForOrder(uint256,uint256)":"05b1ea03","cancelOrder(uint256,bytes32)":"b68fb020","cancelOrders(uint256[],bytes32[])":"89e7c650","fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)":"cc713a04","fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)":"56a75868","fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)":"9fda64bd","fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)":"f497df75","hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))":"802b2ef1","rawRemainingInvalidatorForOrder(address,bytes32)":"c2a40753","remainingInvalidatorForOrder(address,bytes32)":"435b9789","simulate(address,bytes)":"bd61951d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochManagerAndBitInvalidatorsAreIncompatible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPermit2Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidatedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MakingAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchArraysLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderIsNotSuitableForMassInvalidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredicateIsNotTrue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"name\":\"SimulationResults\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakingAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromMakerToTakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTakerToMakerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSeriesNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotValue\",\"type\":\"uint256\"}],\"name\":\"BitInvalidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"bitInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalMask\",\"type\":\"uint256\"}],\"name\":\"bitsInvalidateForOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"MakerTraits[]\",\"name\":\"makerTraits\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillContractOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillContractOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"TakerTraits\",\"name\":\"takerTraits\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"fillOrderArgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"makerAsset\",\"type\":\"uint256\"},{\"internalType\":\"Address\",\"name\":\"takerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"MakerTraits\",\"name\":\"makerTraits\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"rawRemainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingInvalidatorForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slotIndex\":\"Slot index that was updated\",\"slotValue\":\"New slot value\"}},\"OrderCancelled(bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"}},\"OrderFilled(bytes32,uint256)\":{\"params\":{\"orderHash\":\"Hash of the order\",\"remainingAmount\":\"Amount of the maker asset that remains to be filled\"}}},\"kind\":\"dev\",\"methods\":{\"bitInvalidatorForOrder(address,uint256)\":{\"params\":{\"maker\":\"Maker address\",\"slot\":\"Slot number to return bitmask for\"},\"returns\":{\"result\":\"Each bit represents whether corresponding was already invalidated\"}},\"bitsInvalidateForOrder(uint256,uint256)\":{\"params\":{\"additionalMask\":\"Additional bitmask to invalidate orders\",\"makerTraits\":\"Order makerTraits\"}},\"cancelOrder(uint256,bytes32)\":{\"params\":{\"makerTraits\":\"Order makerTraits\",\"orderHash\":\"Hash of the order to cancel\"}},\"cancelOrders(uint256[],bytes32[])\":{\"params\":{\"makerTraits\":\"Orders makerTraits\",\"orderHashes\":\"Hashes of the orders to cancel\"}},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"details\":\"See tests for examples\",\"params\":{\"amount\":\"Taker amount to fill\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"amount\":\"Taker amount to fill\",\"args\":\"Arguments that are used by the taker (target, extension, interaction, permit)\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"params\":{\"amount\":\"Taker amount to fill\",\"order\":\"Order quote to fill\",\"r\":\"R component of signature\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\",\"vs\":\"VS component of signature\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"Taker amount to fill\",\"args\":\"Arguments that are used by the taker (target, extension, interaction, permit)\",\"order\":\"Order quote to fill\",\"r\":\"R component of signature\",\"takerTraits\":\"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.\",\"vs\":\"VS component of signature\"},\"returns\":{\"makingAmount\":\"Actual amount transferred from maker to taker\",\"orderHash\":\"Hash of the filled order\",\"takingAmount\":\"Actual amount transferred from taker to maker\"}},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"order\":\"Order\"},\"returns\":{\"orderHash\":\"Hash of the order\"}},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"},\"returns\":{\"remainingRaw\":\"Inverse of the remaining amount of the order if order was filled at least once, otherwise 0\"}},\"remainingInvalidatorForOrder(address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order\"},\"returns\":{\"remaining\":\"Remaining amount of the order\"}},\"simulate(address,bytes)\":{\"details\":\"The function always reverts and returns the simulation results in revert data.\",\"params\":{\"data\":\"Data that will be passed to delegatee\",\"target\":\"Addresses that will be delegated\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BitInvalidatorUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when order with `useBitInvalidator` gets cancelled\"},\"OrderCancelled(bytes32)\":{\"notice\":\"Emitted when order without `useBitInvalidator` gets cancelled\"},\"OrderFilled(bytes32,uint256)\":{\"notice\":\"Emitted when order gets filled\"}},\"kind\":\"user\",\"methods\":{\"bitInvalidatorForOrder(address,uint256)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"bitsInvalidateForOrder(uint256,uint256)\":{\"notice\":\"Cancels all quotes of the maker (works for bit-invalidating orders only)\"},\"cancelOrder(uint256,bytes32)\":{\"notice\":\"Cancels order's quote\"},\"cancelOrders(uint256[],bytes32[])\":{\"notice\":\"Cancels orders' quotes\"},\"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"Same as `fillOrder` but uses contract-based signatures.\"},\"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)\":{\"notice\":\"Same as `fillContractOrder` but allows to specify arguments that are used by the taker.\"},\"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Fills order's quote, fully or partially (whichever is possible).\"},\"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)\":{\"notice\":\"Same as `fillOrder` but allows to specify arguments that are used by the taker.\"},\"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Returns order hash, hashed with limit order protocol contract EIP712\"},\"rawRemainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"remainingInvalidatorForOrder(address,bytes32)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"simulate(address,bytes)\":{\"notice\":\"Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\":\"IOrderMixin\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@1inch/limit-order-protocol-contract/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/\",\":@1inch/limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/\",\":@1inch/solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/\",\":@openzeppelin/contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/\",\":cross-chain-swap/=contracts/lib/cross-chain-swap/contracts/\",\":ds-test/=contracts/lib/cross-chain-swap/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=contracts/lib/forge-std/src/\",\":limit-order-protocol/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/\",\":limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/\",\":murky/=contracts/lib/cross-chain-swap/lib/murky/\",\":openzeppelin-contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/\",\":solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/\"],\"viaIR\":true},\"sources\":{\"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\":{\"keccak256\":\"0x8f13c59bdb818152a3046a63f1a65f8be1b8c0dbff6407e663bc20d1e6a3a84c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5757f05f8dc7fe40604125321570251a6d152f89dfde3609bf2840063f39f052\",\"dweb:/ipfs/QmUjmTa5Ley6sEAmpKNFdFHEf4H1dvaVymGHddp7MJotKh\"]},\"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/libraries/MakerTraitsLib.sol\":{\"keccak256\":\"0xd0e1f653233823874ede7ac1410dc0b21ca83b4c153bdeff32f6d1f6fd7917e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8ae597779feec21fdce24aa17626e77fc5aa6bb4020faecc2d17e87e73891c6\",\"dweb:/ipfs/QmeTE3KzpmSQ73fBJqyeThnjJRntYMbuTbfwosNXcrXGvC\"]},\"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/libraries/TakerTraitsLib.sol\":{\"keccak256\":\"0x144f154a46e8daa0fec5b8215f1d8d3b694cb939236aa7bf89976b27965c2837\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f23137afedddf14558f8ed65b7ab2fbb1d9fef29d728208ed5688a7d3fcd974\",\"dweb:/ipfs/QmfAzyJViWvYAgoSrnKHZSRx36VF8xwdLQjhEw1Y6PGok9\"]},\"contracts/lib/cross-chain-swap/lib/solidity-utils/contracts/libraries/AddressLib.sol\":{\"keccak256\":\"0xe860b410ed5371b9732daab80982eef0a42ae48474716a89725ca744e27b7d75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f12dfcc4aae2acb16afd6557ecbda6ec019e084463fd0fb08bc906d4416f59e\",\"dweb:/ipfs/QmSC48i8UngVeNyHzEKPjaXAJ74sfCS9FBCyY8uH6eLEe1\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BadSignature"},{"inputs":[],"type":"error","name":"EpochManagerAndBitInvalidatorsAreIncompatible"},{"inputs":[],"type":"error","name":"InvalidPermit2Transfer"},{"inputs":[],"type":"error","name":"InvalidatedOrder"},{"inputs":[],"type":"error","name":"MakingAmountTooLow"},{"inputs":[],"type":"error","name":"MismatchArraysLengths"},{"inputs":[],"type":"error","name":"OrderExpired"},{"inputs":[],"type":"error","name":"OrderIsNotSuitableForMassInvalidation"},{"inputs":[],"type":"error","name":"PartialFillNotAllowed"},{"inputs":[],"type":"error","name":"PredicateIsNotTrue"},{"inputs":[],"type":"error","name":"PrivateOrder"},{"inputs":[],"type":"error","name":"ReentrancyDetected"},{"inputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"res","type":"bytes"}],"type":"error","name":"SimulationResults"},{"inputs":[],"type":"error","name":"SwapWithZeroAmount"},{"inputs":[],"type":"error","name":"TakingAmountExceeded"},{"inputs":[],"type":"error","name":"TakingAmountTooHigh"},{"inputs":[],"type":"error","name":"TransferFromMakerToTakerFailed"},{"inputs":[],"type":"error","name":"TransferFromTakerToMakerFailed"},{"inputs":[],"type":"error","name":"WrongSeriesNonce"},{"inputs":[{"internalType":"address","name":"maker","type":"address","indexed":true},{"internalType":"uint256","name":"slotIndex","type":"uint256","indexed":false},{"internalType":"uint256","name":"slotValue","type":"uint256","indexed":false}],"type":"event","name":"BitInvalidatorUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32","indexed":false}],"type":"event","name":"OrderCancelled","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32","indexed":false},{"internalType":"uint256","name":"remainingAmount","type":"uint256","indexed":false}],"type":"event","name":"OrderFilled","anonymous":false},{"inputs":[{"internalType":"address","name":"maker","type":"address"},{"internalType":"uint256","name":"slot","type":"uint256"}],"stateMutability":"view","type":"function","name":"bitInvalidatorForOrder","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}]},{"inputs":[{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"},{"internalType":"uint256","name":"additionalMask","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"bitsInvalidateForOrder"},{"inputs":[{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"cancelOrder"},{"inputs":[{"internalType":"MakerTraits[]","name":"makerTraits","type":"uint256[]"},{"internalType":"bytes32[]","name":"orderHashes","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"cancelOrders"},{"inputs":[{"internalType":"struct IOrderMixin.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"Address","name":"maker","type":"uint256"},{"internalType":"Address","name":"receiver","type":"uint256"},{"internalType":"Address","name":"makerAsset","type":"uint256"},{"internalType":"Address","name":"takerAsset","type":"uint256"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"}]},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"TakerTraits","name":"takerTraits","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"fillContractOrder","outputs":[{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct IOrderMixin.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"Address","name":"maker","type":"uint256"},{"internalType":"Address","name":"receiver","type":"uint256"},{"internalType":"Address","name":"makerAsset","type":"uint256"},{"internalType":"Address","name":"takerAsset","type":"uint256"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"}]},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"TakerTraits","name":"takerTraits","type":"uint256"},{"internalType":"bytes","name":"args","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"fillContractOrderArgs","outputs":[{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct IOrderMixin.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"Address","name":"maker","type":"uint256"},{"internalType":"Address","name":"receiver","type":"uint256"},{"internalType":"Address","name":"makerAsset","type":"uint256"},{"internalType":"Address","name":"takerAsset","type":"uint256"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"}]},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"vs","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"TakerTraits","name":"takerTraits","type":"uint256"}],"stateMutability":"payable","type":"function","name":"fillOrder","outputs":[{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct IOrderMixin.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"Address","name":"maker","type":"uint256"},{"internalType":"Address","name":"receiver","type":"uint256"},{"internalType":"Address","name":"makerAsset","type":"uint256"},{"internalType":"Address","name":"takerAsset","type":"uint256"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"}]},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"vs","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"TakerTraits","name":"takerTraits","type":"uint256"},{"internalType":"bytes","name":"args","type":"bytes"}],"stateMutability":"payable","type":"function","name":"fillOrderArgs","outputs":[{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct IOrderMixin.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"Address","name":"maker","type":"uint256"},{"internalType":"Address","name":"receiver","type":"uint256"},{"internalType":"Address","name":"makerAsset","type":"uint256"},{"internalType":"Address","name":"takerAsset","type":"uint256"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"MakerTraits","name":"makerTraits","type":"uint256"}]}],"stateMutability":"view","type":"function","name":"hashOrder","outputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"maker","type":"address"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"rawRemainingInvalidatorForOrder","outputs":[{"internalType":"uint256","name":"remainingRaw","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"maker","type":"address"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"remainingInvalidatorForOrder","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"simulate"}],"devdoc":{"kind":"dev","methods":{"bitInvalidatorForOrder(address,uint256)":{"params":{"maker":"Maker address","slot":"Slot number to return bitmask for"},"returns":{"result":"Each bit represents whether corresponding was already invalidated"}},"bitsInvalidateForOrder(uint256,uint256)":{"params":{"additionalMask":"Additional bitmask to invalidate orders","makerTraits":"Order makerTraits"}},"cancelOrder(uint256,bytes32)":{"params":{"makerTraits":"Order makerTraits","orderHash":"Hash of the order to cancel"}},"cancelOrders(uint256[],bytes32[])":{"params":{"makerTraits":"Orders makerTraits","orderHashes":"Hashes of the orders to cancel"}},"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)":{"details":"See tests for examples","params":{"amount":"Taker amount to fill","order":"Order quote to fill","signature":"Signature to confirm quote ownership","takerTraits":"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit."},"returns":{"makingAmount":"Actual amount transferred from maker to taker","orderHash":"Hash of the filled order","takingAmount":"Actual amount transferred from taker to maker"}},"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)":{"details":"See tests for examples","params":{"amount":"Taker amount to fill","args":"Arguments that are used by the taker (target, extension, interaction, permit)","order":"Order quote to fill","signature":"Signature to confirm quote ownership","takerTraits":"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit."},"returns":{"makingAmount":"Actual amount transferred from maker to taker","orderHash":"Hash of the filled order","takingAmount":"Actual amount transferred from taker to maker"}},"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)":{"params":{"amount":"Taker amount to fill","order":"Order quote to fill","r":"R component of signature","takerTraits":"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.","vs":"VS component of signature"},"returns":{"makingAmount":"Actual amount transferred from maker to taker","orderHash":"Hash of the filled order","takingAmount":"Actual amount transferred from taker to maker"}},"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)":{"params":{"amount":"Taker amount to fill","args":"Arguments that are used by the taker (target, extension, interaction, permit)","order":"Order quote to fill","r":"R component of signature","takerTraits":"Specifies threshold as maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. The 2nd (0 based index) highest bit specifies whether taker wants to skip maker's permit.","vs":"VS component of signature"},"returns":{"makingAmount":"Actual amount transferred from maker to taker","orderHash":"Hash of the filled order","takingAmount":"Actual amount transferred from taker to maker"}},"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))":{"params":{"order":"Order"},"returns":{"orderHash":"Hash of the order"}},"rawRemainingInvalidatorForOrder(address,bytes32)":{"params":{"orderHash":"Hash of the order"},"returns":{"remainingRaw":"Inverse of the remaining amount of the order if order was filled at least once, otherwise 0"}},"remainingInvalidatorForOrder(address,bytes32)":{"params":{"orderHash":"Hash of the order"},"returns":{"remaining":"Remaining amount of the order"}},"simulate(address,bytes)":{"details":"The function always reverts and returns the simulation results in revert data.","params":{"data":"Data that will be passed to delegatee","target":"Addresses that will be delegated"}}},"version":1},"userdoc":{"kind":"user","methods":{"bitInvalidatorForOrder(address,uint256)":{"notice":"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"},"bitsInvalidateForOrder(uint256,uint256)":{"notice":"Cancels all quotes of the maker (works for bit-invalidating orders only)"},"cancelOrder(uint256,bytes32)":{"notice":"Cancels order's quote"},"cancelOrders(uint256[],bytes32[])":{"notice":"Cancels orders' quotes"},"fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)":{"notice":"Same as `fillOrder` but uses contract-based signatures."},"fillContractOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,bytes)":{"notice":"Same as `fillContractOrder` but allows to specify arguments that are used by the taker."},"fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)":{"notice":"Fills order's quote, fully or partially (whichever is possible)."},"fillOrderArgs((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,bytes)":{"notice":"Same as `fillOrder` but allows to specify arguments that are used by the taker."},"hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))":{"notice":"Returns order hash, hashed with limit order protocol contract EIP712"},"rawRemainingInvalidatorForOrder(address,bytes32)":{"notice":"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"},"remainingInvalidatorForOrder(address,bytes32)":{"notice":"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"},"simulate(address,bytes)":{"notice":"Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly"}},"version":1}},"settings":{"remappings":["@1inch/limit-order-protocol-contract/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/","@1inch/limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/","@1inch/solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/","@openzeppelin/contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/contracts/","cross-chain-swap/=contracts/lib/cross-chain-swap/contracts/","ds-test/=contracts/lib/cross-chain-swap/lib/forge-std/lib/ds-test/src/","erc4626-tests/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=contracts/lib/forge-std/src/","limit-order-protocol/=contracts/lib/cross-chain-swap/lib/limit-order-protocol/","limit-order-settlement/=contracts/lib/cross-chain-swap/lib/limit-order-settlement/","murky/=contracts/lib/cross-chain-swap/lib/murky/","openzeppelin-contracts/=contracts/lib/cross-chain-swap/lib/openzeppelin-contracts/","solidity-utils/=contracts/lib/cross-chain-swap/lib/solidity-utils/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol":"IOrderMixin"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol":{"keccak256":"0x8f13c59bdb818152a3046a63f1a65f8be1b8c0dbff6407e663bc20d1e6a3a84c","urls":["bzz-raw://5757f05f8dc7fe40604125321570251a6d152f89dfde3609bf2840063f39f052","dweb:/ipfs/QmUjmTa5Ley6sEAmpKNFdFHEf4H1dvaVymGHddp7MJotKh"],"license":"MIT"},"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/libraries/MakerTraitsLib.sol":{"keccak256":"0xd0e1f653233823874ede7ac1410dc0b21ca83b4c153bdeff32f6d1f6fd7917e3","urls":["bzz-raw://b8ae597779feec21fdce24aa17626e77fc5aa6bb4020faecc2d17e87e73891c6","dweb:/ipfs/QmeTE3KzpmSQ73fBJqyeThnjJRntYMbuTbfwosNXcrXGvC"],"license":"MIT"},"contracts/lib/cross-chain-swap/lib/limit-order-protocol/contracts/libraries/TakerTraitsLib.sol":{"keccak256":"0x144f154a46e8daa0fec5b8215f1d8d3b694cb939236aa7bf89976b27965c2837","urls":["bzz-raw://8f23137afedddf14558f8ed65b7ab2fbb1d9fef29d728208ed5688a7d3fcd974","dweb:/ipfs/QmfAzyJViWvYAgoSrnKHZSRx36VF8xwdLQjhEw1Y6PGok9"],"license":"MIT"},"contracts/lib/cross-chain-swap/lib/solidity-utils/contracts/libraries/AddressLib.sol":{"keccak256":"0xe860b410ed5371b9732daab80982eef0a42ae48474716a89725ca744e27b7d75","urls":["bzz-raw://3f12dfcc4aae2acb16afd6557ecbda6ec019e084463fd0fb08bc906d4416f59e","dweb:/ipfs/QmSC48i8UngVeNyHzEKPjaXAJ74sfCS9FBCyY8uH6eLEe1"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"id":19}